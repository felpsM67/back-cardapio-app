openapi: '3.0.0'
info:
  version: 1.0.0
  title: API de Gerenciamento de Usuários e Pratos
  description: Esta é uma API para gerenciar usuários e pratos com autenticação JWT.
servers:
  - url: http://localhost:3000
    description: Servidor local

tags:
  - name: Users
    description: Operações relacionadas a usuários
  - name: Pratos
    description: Operações relacionadas a pratos
  - name: Auth
    description: Operações de autenticação

paths:
  /api/users:
    post:
      summary: Cria um novo usuário
      tags: [Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: O usuário foi criado com sucesso!
        500:
          description: Algum erro aconteceu
  /api/users/{id}:
    get:
      summary: Retorna um usuário pelo ID
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: false
          description: O ID do usuário
      responses:
        200:
          description: Detalhes do usuário
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: Usuário não encontrado
        500:
          description: Algum erro aconteceu
    put:
      summary: Atualiza um usuário pelo ID
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: O ID do usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: O usuário foi atualizado com sucesso!
        404:
          description: Usuário não encontrado
        500:
          description: Algum erro aconteceu
    delete:
      summary: Deleta um usuário pelo ID
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: O ID do usuário
      responses:
        200:
          description: O usuário foi deletado com sucesso!
        404:
          description: Usuário não encontrado
        500:
          description: Algum erro aconteceu
  /api/pratos:
    post:
      summary: Cria um novo prato
      tags: [Pratos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prato'
      responses:
        201:
          description: O prato foi criado com sucesso!
        500:
          description: Algum erro aconteceu
    get:
      summary: Retorna todos os pratos
      tags: [Pratos]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Uma lista de pratos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prato'
        500:
          description: Algum erro aconteceu
  /api/pratos/{id}:
    get:
      summary: Retorna um prato pelo ID
      tags: [Pratos]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: O ID do prato
      responses:
        200:
          description: Detalhes do prato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prato'
        404:
          description: Prato não encontrado
        500:
          description: Algum erro aconteceu
    put:
      summary: Atualiza um prato pelo ID
      tags: [Pratos]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: O ID do prato
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prato'
      responses:
        200:
          description: O prato foi atualizado com sucesso!
        404:
          description: Prato não encontrado
        500:
          description: Algum erro aconteceu
    delete:
      summary: Deleta um prato pelo ID
      tags: [Pratos]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: O ID do prato
      responses:
        200:
          description: O prato foi deletado com sucesso!
        404:
          description: Prato não encontrado
        500:
          description: Algum erro aconteceu
  /api/login:
    post:
      summary: Autentica um usuário e retorna um token JWT
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        200:
          description: Autenticação bem-sucedida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshToken'
        401:
          description: Credenciais inválidas
        500:
          description: Algum erro aconteceu
  /api/refresh-token:
    post:
      summary: Gera um novo token JWT
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: Token JWT atual
              example:
                refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        200:
          description: Novo token gerado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshToken'
        401:
          description: Token inválido ou expirado
        500:
          description: Algum erro aconteceu


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required:
        - nome
        - senha
        - email
        - role
      properties:
        nome:
          type: string
          description: O nome de usuário
        senha:
          type: string
          description: A senha do usuário
        email:
          type: string
          description: O email do usuário
        role:
          type: string
          description: O papel do usuário no sistema
      example:
        id: 1
        nome: "João da Silva"
        senha: "123abc"
        email: "joao.silva@dominio.com"
        role: "Gerente"
    Prato:
      type: object
      required:
        - nome
        - descricao
        - preco
      properties:
        nome:
          type: string
          description: O nome do prato
        descricao:
          type: string
          description: A descrição do prato
        preco:
          type: number
          format: float
          description: O preço do prato
      example:
        id: 1
        nome: "Lasanha"
        descricao: "Lasanha à bolonhesa com queijo gratinado"
        preco: 29.90
    Login:
      type: object
      required:
        - email
        - senha
      properties:
        email:
          type: string
          description: O email do usuário
        senha:
          type: string
          description: A senha do usuário
      example:
        email: "joao.silva@dominio.com"
        senha: "123abc"
    RefreshToken:
      type: string
      description: Token JWT para autenticação
      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
